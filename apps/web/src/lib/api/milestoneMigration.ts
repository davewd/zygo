/**
 * Migration utilities for moving from TypeScript generation to CSV-based milestones
 */

import { generateComprehensiveMilestones } from '../../components/timeline/utils/milestoneGeneration';
import { exportMilestonesToCSV, loadMilestonesFromCSV } from './milestones';

/**
 * Compare generated milestones with CSV data to ensure consistency
 */
export async function compareGeneratedWithCSV() {
  try {
    const generatedMilestones = generateComprehensiveMilestones();
    const csvMilestones = await loadMilestonesFromCSV();
    
    console.log('ðŸ“Š Milestone Comparison:');
    console.log(`Generated: ${generatedMilestones.length} milestones`);
    console.log(`CSV: ${csvMilestones.length} milestones`);
    
    // Compare by categories
    const generatedByCategory = generatedMilestones.reduce((acc, m) => {
      acc[m.category] = (acc[m.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const csvByCategory = csvMilestones.reduce((acc, m) => {
      acc[m.category] = (acc[m.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('Generated by category:', generatedByCategory);
    console.log('CSV by category:', csvByCategory);
    
    return {
      generated: generatedMilestones,
      csv: csvMilestones,
      generatedByCategory,
      csvByCategory
    };
  } catch (error) {
    console.error('Error comparing milestones:', error);
    throw error;
  }
}

/**
 * Export generated milestones to CSV format for verification
 */
export function exportGeneratedToCSV() {
  try {
    const generatedMilestones = generateComprehensiveMilestones();
    const csvContent = exportMilestonesToCSV(generatedMilestones);
    
    return csvContent;
  } catch (error) {
    console.error('Error exporting generated milestones:', error);
    throw error;
  }
}

/**
 * Migration status check
 */
export function getMigrationStatus() {
  return {
    status: 'completed',
    description: 'Milestone data has been successfully migrated from TypeScript generation to CSV format',
    csvLocation: '/public/data/comprehensive-milestones.csv',
    apiLocation: '/src/lib/api/milestones.ts',
    deprecatedLocation: '/src/components/timeline/utils/milestoneGeneration.ts (deprecated)',
    nextSteps: [
      'Update components to use loadMilestonesFromCSV() instead of generateComprehensiveMilestones()',
      'Test the new CSV loading in development',
      'Consider removing the deprecated generation file after thorough testing'
    ]
  };
}
